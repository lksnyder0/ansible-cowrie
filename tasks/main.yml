---
- name: Install required packages
  apt:
    name: 
      - git
      - python3-virtualenv
      - libssl-dev
      - libffi-dev
      - build-essential
      - libpython3-dev
      - python3-minimal
      - authbind
      - virtualenv
    state: present

- name: Create group
  group:
    name: "{{ cowrie_group }}"
    state: present

- name: Create user account
  user:
    name: "{{ cowrie_user }}"
    group: "{{ cowrie_group }}"
    shell: "/bin/bash"

- name: Get code
  git:
    repo: "{{ cowrie_repo }}"
    dest: "{{ cowrie_dir }}"
    version: "{{ cowrie_version }}"
    force: yes
  notify: "Restart cowrie"

- name: Create virtual environment and install requirements
  pip:
    requirements: "{{ cowrie_dir }}/requirements.txt"
    virtualenv: "{{ cowrie_dir }}/cowrie-env"
    virtualenv_python: "python3"

- name: Install extra python packages
  pip:
    virtualenv: "{{ cowrie_dir }}/cowrie-env"
    virtualenv_python: "python3"
    name: 
      - botocore

- name: Ensure required directories exist
  file:
    dest: "{{ item }}"
    state: "directory"
    owner: "{{ cowrie_user }}"
    group: "{{ cowrie_group }}"
  with_items:
    - "{{ cowrie_dir }}/{{ cowrie_ttylog_path }}"

- name: Install configuration
  template:
    src: "cowrie.cfg.j2"
    dest: "{{ cowrie_dir }}/{{ cowrie_etc_path }}/cowrie.cfg"
    group: "{{ cowrie_group }}"
    owner: "{{ cowrie_user }}"
  notify: "Restart cowrie"

- name: Install AuthDB File
  copy:
    src: "{{ cowrie_userdb_location }}"
    dest: "{{ cowrie_dir }}/{{ cowrie_etc_path }}/userdb.txt"
    group: "{{ cowrie_group }}"
    owner: "{{ cowrie_user }}"
  when: cowrie_auth_class == "UserDB"
  notify: "Restart cowrie"

- name: Ensure permissions are correct
  file:
    dest: "{{ cowrie_dir }}"
    owner: "{{ cowrie_user }}"
    group: "{{ cowrie_group }}"
    mode: "u=rwX,g=rX,o=rX"
    recurse: yes

- name: Redirect port
  iptables:
    table: "nat"
    chain: "PREROUTING"
    protocol: "tcp"
    match: "tcp"
    destination_port: "{{ cowrie_port_pub }}"
    jump: "REDIRECT"
    to_ports: "{{ cowrie_port_priv }}"
    comment: "Redirect cowrie traffic from {{ cowrie_port_pub }} to {{ cowrie_port_priv }}"
  become: yes

- name: Use native manager
  include: manager_native.yml
  when: cowrie_manager == "native"

- name: Create systemd configuration
  template:
    src: cowrie.service.j2
    dest: /etc/systemd/system/cowrie.service
    group: "{{ cowrie_group }}"
    owner: "{{ cowrie_user }}"
  notify: "Restart cowrie"
  when: cowrie_manager == "systemd"
