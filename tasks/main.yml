---
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - git
    - python-virtualenv
    - libssl-dev
    - libffi-dev
    - build-essential
    - libpython-dev
    - python2.7-minimal
    - authbind
- name: Create group
  group:
    name: "{{ cowrie_group }}"
    state: present
- name: Create user account
  user:
    name: "{{ cowrie_user }}"
    group: "{{ cowrie_group }}"
    shell: "/bin/bash"
- name: Get code
  git:
    repo: "{{ cowrie_repo }}"
    dest: "{{ cowrie_dir }}"
    version: "{{ cowrie_version }}"
    force: yes
- name: Create virtual environment and install requirements
  pip:
    requirements: "{{ cowrie_dir }}/requirements.txt"
    virtualenv: "{{ cowrie_dir }}/cowrie-env"
    virtualenv_python: "python2.7"
- name: Install extra python packages
  pip:
    virtualenv: "{{ cowrie_dir }}/cowrie-env"
    virtualenv_python: "python2.7"
    name: "{{ item }}"
  with_items:
    - botocore
- name: Install configuration
  template:
    src: "cowrie.cfg.j2"
    dest: "{{ cowrie_dir }}/etc/cowrie.cfg"
  notify: "Restart cowrie"
- name: Install AuthDB File
  copy:
    src: "{{ cowrie_userdb_location }}"
    dest: "{{ cowrie_dir }}/data/userdb.txt"
    group: "{{ cowrie_group }}"
    owner: "{{ cowrie_user }}"
  when: cowrie_auth_class == "UserDB"
  notify: "Restart cowrie"
- name: Ensure tty folder exists
  file:
    dest: " {{ cowrie_dir }}/var/lib/cowrie/tty/"
    state: directory
- name: Ensure permissions are correct
  file:
    dest: "{{ cowrie_dir }}"
    owner: "{{ cowrie_user }}"
    mode: "u=rwX,g=rX,o=rX"
    recurse: yes
- name: Redirect port
  iptables:
    table: "nat"
    chain: "PREROUTING"
    protocol: "tcp"
    match: "tcp"
    destination_port: "{{ cowrie_port_pub }}"
    jump: "REDIRECT"
    to_ports: "{{ cowrie_port_priv }}"
    comment: "Redirect cowrie traffic from {{ cowrie_port_pub }} to {{ cowrie_port_priv }}"
  become: yes
- name: Test if cowrie is running
  shell: "bin/cowrie status"
  args:
    chdir: "{{ cowrie_dir }}"
  register: cowrie_status
- name: Start cowrie
  shell: "bin/cowrie start"
  args:
    chdir: "{{ cowrie_dir }}"
  when: '"cowrie is running" not in cowrie_status.stdout'
  become: yes
  become_user: "{{ cowrie_user }}"